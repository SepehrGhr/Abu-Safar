openapi: 3.0.1
info:
  title: AbuSafar API
  description: A comprehensive transportation booking platform API.
  license:
    name: Apache 2.0
    url: http://springdoc.org
  version: v1.0.0
servers:
  - url: http://localhost:8080
    description: Generated server url
security:
  - bearerAuth: []
tags:
  - name: Booking History
    description: APIs for viewing user reservation history
  - name: Location Information
    description: APIs for retrieving location data like countries, provinces, and cities
  - name: User Authentication
    description: APIs for user sign-up and login
  - name: Ticket Search
    description: Public APIs for searching and selecting tickets
  - name: Payment Processing
    description: APIs for processing payments for reservations
  - name: Ticket Reservation
    description: APIs for creating one-way and two-way reservations
  - name: User Reports
    description: APIs for submitting user feedback and reports
  - name: Admin Management
    description: Endpoints for administrative operations
  - name: Booking Cancellation
    description: APIs for calculating penalties and cancelling reservations
  - name: User Profile
    description: APIs for managing the authenticated user's profile
paths:
  /api/profile/update:
    put:
      tags:
        - User Profile
      summary: Update User Profile
      description: Allows an authenticated user to update their own profile information, such as name, city, and contact details.
      operationId: updateUserInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequestDTO'
        required: true
      responses:
        '200':
          description: User information updated successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseUserInfoDTO'
        '400':
          description: Invalid data format or contact information is already in use by another account
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseUserInfoDTO'
      security:
        - bearerAuth: []
  /api/admin/reservations/change-seat:
    put:
      tags:
        - Admin Management
      summary: Change a Passenger's Seat Number
      description: Updates the seat number for a specific ticket leg within a reservation.
      operationId: changeSeatNumber
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditReservationRequestDTO'
        required: true
      responses:
        '200':
          description: Seat number updated successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseString'
        '400':
          description: Invalid request (e.g., seat is already taken or out of range)
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseString'
        '404':
          description: The specified reservation or trip leg does not exist
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseString'
      security:
        - bearerAuth: []
  /api/tickets/select:
    post:
      tags:
        - Ticket Search
      summary: Select a specific ticket to view details
      description: Public endpoint to retrieve the full details for a single ticket, including vehicle-specific information and services, before a user commits to booking.
      operationId: selectTicket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketSelectRequestDTO'
        required: true
      responses:
        '200':
          description: Ticket details found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseObject'
        '400':
          description: Invalid request body
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseObject'
        '404':
          description: Ticket not found for the given criteria
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseObject'
  /api/tickets/search:
    post:
      tags:
        - Ticket Search
      summary: Search for available tickets
      description: Public endpoint to search for one-way tickets based on criteria like origin, destination, date, and vehicle type. Authentication is not required.
      operationId: findTickets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketSearchRequestDTO'
        required: true
      responses:
        '200':
          description: Successfully retrieved a list of tickets (can be empty if no matching trips or locations are found)
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseObject'
        '400':
          description: Invalid search criteria provided
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseObject'
  /api/reports/submit:
    post:
      tags:
        - User Reports
      summary: Submit a New Report
      description: Allows an authenticated user to submit a report related to a reservation or ticket. The report is then reviewable by an admin.
      operationId: submitReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportRequestDTO'
        required: true
      responses:
        '201':
          description: Report submitted successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseReport'
        '400':
          description: Invalid report data provided
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseReport'
      security:
        - bearerAuth: []
  /api/payment/pay:
    post:
      tags:
        - Payment Processing
      summary: Process Payment for a Reservation
      description: Processes the payment for a reserved booking using the specified payment method (e.g., WALLET, CARD). On success, this finalizes the booking and updates the reservation status to 'PAID'.
      operationId: processPayment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequestDTO'
        required: true
      responses:
        '200':
          description: Payment processed successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponsePaymentRecordDTO'
        '400':
          description: Payment failed (e.g., reservation expired, already paid, or insufficient wallet balance)
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponsePaymentRecordDTO'
        '403':
          description: Forbidden - User does not own this reservation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponsePaymentRecordDTO'
        '404':
          description: Reservation not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponsePaymentRecordDTO'
      security:
        - bearerAuth: []
  /api/booking/reserve/two_way:
    post:
      tags:
        - Ticket Reservation
      summary: Create a Two-Way (Round-Trip) Reservation
      description: Initiates a new two-way reservation for an outgoing and return ticket. Expects an array of two ticket selections. This holds the tickets for 10 minutes, awaiting payment.
      operationId: initiateTwoWayReservation
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TicketSelectRequestDTO'
        required: true
      responses:
        '200':
          description: Reservation successfully initiated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseReserveConfirmationDTO'
        '400':
          description: Invalid ticket selections (e.g., return trip is before departure, destinations don't match, or trip is full)
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseReserveConfirmationDTO'
        '404':
          description: One or both Tickets/Trips not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseReserveConfirmationDTO'
      security:
        - bearerAuth: []
  /api/booking/reserve/one_way:
    post:
      tags:
        - Ticket Reservation
      summary: Create a One-Way Reservation
      description: Initiates a new one-way reservation for a single selected ticket. This holds the ticket for 10 minutes, awaiting payment.
      operationId: initiateOneWayReservation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketSelectRequestDTO'
        required: true
      responses:
        '200':
          description: Reservation successfully initiated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseReserveConfirmationDTO'
        '400':
          description: Invalid ticket selection or trip is full
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseReserveConfirmationDTO'
        '404':
          description: Ticket or Trip not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseReserveConfirmationDTO'
      security:
        - bearerAuth: []
  /api/booking/cancel/confirm:
    post:
      tags:
        - Booking Cancellation
      summary: Confirm and Process Reservation Cancellation
      description: Processes the cancellation of a reservation. This is the final step and is irreversible. It updates the reservation status and refunds the user to their wallet after deducting penalties.
      operationId: confirmCancellation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancellationPenaltyRequestDTO'
        required: true
      responses:
        '200':
          description: Reservation successfully cancelled
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseCancellationResponseDTO'
        '403':
          description: Forbidden - User is not authenticated or does not own the reservation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseCancellationResponseDTO'
        '404':
          description: Reservation not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseCancellationResponseDTO'
      security:
        - bearerAuth: []
  /api/booking/cancel/calculate:
    post:
      tags:
        - Booking Cancellation
      summary: Calculate Cancellation Penalty
      description: Calculates the penalty fee and total refund amount for cancelling a reservation without actually performing the cancellation. Useful for showing the user the cost beforehand.
      operationId: calculateCancellationPenalty
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancellationPenaltyRequestDTO'
        required: true
      responses:
        '200':
          description: Successfully calculated penalty
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseCancellationPenaltyResponseDTO'
        '403':
          description: Forbidden - User is not authenticated or does not own the reservation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseCancellationPenaltyResponseDTO'
        '404':
          description: Reservation not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseCancellationPenaltyResponseDTO'
      security:
        - bearerAuth: []
  /api/auth/signup:
    post:
      tags:
        - User Authentication
      summary: Register a New User
      description: Creates a new user account. Requires either an email or a phone number.
      operationId: signUpUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequestDTO'
        required: true
      responses:
        '201':
          description: User account created successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseUserInfoDTO'
        '400':
          description: Invalid user data provided (e.g., email already exists, invalid password format)
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseUserInfoDTO'
  /api/auth/login/otp/verify:
    post:
      tags:
        - User Authentication
      summary: Verify OTP and Login
      description: Verifies the provided OTP and, if valid, returns a JWT access token and user information to complete the login process.
      operationId: verifyOtpAndLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OtpVerificationRequestDTO'
        required: true
      responses:
        '200':
          description: Login successful, JWT token returned
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseLoginResponseDTO'
        '400':
          description: Invalid or expired OTP provided
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseLoginResponseDTO'
        '404':
          description: User not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseLoginResponseDTO'
  /api/auth/login/otp/request:
    post:
      tags:
        - User Authentication
      summary: Request OTP for Login
      description: Requests a One-Time Password (OTP) to be sent to the user's registered email or phone number for passwordless login.
      operationId: requestOtpForLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OtpRequestDTO'
        required: true
      responses:
        '200':
          description: OTP request processed successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseString'
        '400':
          description: Invalid contact information format
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseString'
        '404':
          description: User not found with the given contact information
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseString'
  /api/admin/reservations/{reservationId}/cancel:
    post:
      tags:
        - Admin Management
      summary: Cancel a Reservation (Admin)
      description: Forcefully cancels a reservation on behalf of a user. The logged-in admin's ID is recorded as the canceller.
      operationId: cancelReservation
      parameters:
        - name: reservationId
          in: path
          description: The unique ID of the reservation to cancel.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Reservation successfully cancelled
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseCancellationResponseDTO'
        '404':
          description: Reservation not found with the given ID
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseCancellationResponseDTO'
      security:
        - bearerAuth: []
  /api/locations/cities:
    get:
      tags:
        - Location Information
      summary: Get Cities
      description: Retrieves a list of all available cities. If a 'name' query parameter is provided, it searches for locations matching that specific city name.
      operationId: getCities
      parameters:
        - name: name
          in: query
          description: Optional. The name of the city to search for.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseObject'
  /api/bookings/history:
    get:
      tags:
        - Booking History
      summary: Get User's Reservation History
      description: Retrieves a list of all reservations made by the currently authenticated user. Can be filtered by status.
      operationId: getReservationHistory
      parameters:
        - name: status
          in: query
          description: Optional filter to get reservations by a specific status (e.g., UPCOMING_TRIP, PAST_TRIP, CANCELLED).
          required: false
          schema:
            type: string
            enum:
              - UPCOMING_TRIP
              - PAST_TRIP
              - CANCELLED
              - PENDING_PAYMENT
      responses:
        '200':
          description: Successfully retrieved reservation history
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseListReserveRecordItemDTO'
      security:
        - bearerAuth: []
  /api/admin/reservations/{reservationId}:
    get:
      tags:
        - Admin Management
      summary: Get Reservation Details by ID
      description: Fetches the detailed information for a specific reservation, including ticket details.
      operationId: getReservationById
      parameters:
        - name: reservationId
          in: path
          description: The unique ID of the reservation.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Reservation details found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseListReserveRecordItemDTO'
        '403':
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseListReserveRecordItemDTO'
        '404':
          description: Reservation not found with the given ID
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseListReserveRecordItemDTO'
      security:
        - bearerAuth: []
  /api/admin/reservations/cancelled:
    get:
      tags:
        - Admin Management
      summary: Get All Cancelled Reservations
      description: Retrieves a list of all reservations with the status 'CANCELLED'.
      operationId: getCancelledReservations
      responses:
        '200':
          description: Successfully retrieved list of cancelled reservations
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseListReserveRecordItemDTO'
        '403':
          description: Forbidden - User does not have ADMIN role
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseListReserveRecordItemDTO'
      security:
        - bearerAuth: []
  /api/admin/reports:
    get:
      tags:
        - Admin Management
      summary: Get All User Reports
      description: Retrieves a list of all reports submitted by users.
      operationId: getAllReports
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseListReportResponseDTO'
      security:
        - bearerAuth: []
  /api/admin/reports/{reportId}:
    get:
      tags:
        - Admin Management
      summary: Get Report by ID
      description: Fetches a single report by its unique ID.
      operationId: getReportById
      parameters:
        - name: reportId
          in: path
          description: The unique ID of the report.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Report found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseReportResponseDTO'
        '403':
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseReportResponseDTO'
        '404':
          description: Report not found with the given ID
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseReportResponseDTO'
      security:
        - bearerAuth: []
  /api/admin/reports/user/{userId}:
    get:
      tags:
        - Admin Management
      summary: Get All Reports for a Specific User
      description: Retrieves all reports submitted by a specific user, identified by their user ID.
      operationId: getReportsByUser
      parameters:
        - name: userId
          in: path
          description: The unique ID of the user.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponseListReportResponseDTO'
      security:
        - bearerAuth: []
  /api/admin/payments/{paymentId}:
    get:
      tags:
        - Admin Management
      summary: Get Payment Details by ID
      description: Fetches the full details of a single payment record by its unique ID.
      operationId: getPaymentDetails
      parameters:
        - name: paymentId
          in: path
          description: The unique ID of the payment record.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Payment details found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponsePaymentRecordDTO'
        '403':
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponsePaymentRecordDTO'
        '404':
          description: Payment not found with the given ID
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponsePaymentRecordDTO'
      security:
        - bearerAuth: []
components:
  schemas:
    UserUpdateRequestDTO:
      type: object
      properties:
        firstName:
          maxLength: 100
          minLength: 0
          type: string
        lastName:
          maxLength: 100
          minLength: 0
          type: string
        city:
          maxLength: 100
          minLength: 0
          type: string
        email:
          type: string
        phoneNumber:
          pattern: ^\+?[1-9][0-9\s().-]{7,20}$
          type: string
        birthdayDate:
          type: string
          format: date
    BaseResponseUserInfoDTO:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer
          format: int32
        time:
          type: integer
          format: int64
        successful:
          type: boolean
        data:
          $ref: '#/components/schemas/UserInfoDTO'
    UserInfoDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        city:
          type: string
        userType:
          type: string
        signUpDate:
          type: string
          format: date
        walletBalance:
          type: number
        birthdayDate:
          type: string
          format: date
    EditReservationRequestDTO:
      required:
        - newSeatNumber
        - reservationId
        - tripId
      type: object
      properties:
        reservationId:
          type: integer
          format: int64
        tripId:
          type: integer
          format: int64
        newSeatNumber:
          type: integer
          format: int32
    BaseResponseString:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer
          format: int32
        time:
          type: integer
          format: int64
        successful:
          type: boolean
        data:
          type: string
    TicketSelectRequestDTO:
      required:
        - ageCategory
        - trip_id
      type: object
      properties:
        trip_id:
          type: integer
          format: int64
        ageCategory:
          type: string
          enum:
            - ADULT
            - CHILD
            - BABY
    BaseResponseObject:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer
          format: int32
        time:
          type: integer
          format: int64
        successful:
          type: boolean
        data:
          type: object
    LocalTime:
      type: object
      properties:
        hour:
          type: integer
          format: int32
        minute:
          type: integer
          format: int32
        second:
          type: integer
          format: int32
        nano:
          type: integer
          format: int32
    TicketSearchRequestDTO:
      required:
        - departureDate
        - destinationCity
        - originCity
        - tripVehicle
      type: object
      properties:
        originCity:
          type: string
        originProvince:
          type: string
        originCountry:
          type: string
        destinationCity:
          type: string
        destinationProvince:
          type: string
        destinationCountry:
          type: string
        departureDate:
          type: string
          format: date
        departureTime:
          $ref: '#/components/schemas/LocalTime'
        vehicleCompany:
          type: string
        tripVehicle:
          type: string
          enum:
            - TRAIN
            - BUS
            - FLIGHT
        ageCategory:
          type: string
          enum:
            - ADULT
            - CHILD
            - BABY
        minPrice:
          type: number
        maxPrice:
          type: number
        busClass:
          type: string
          enum:
            - VIP
            - STANDARD
            - SLEEPER
        flightClass:
          type: string
          enum:
            - ECONOMY_CLASS
            - BUSINESS_CLASS
            - FIRST_CLASS
        trainStars:
          type: integer
          format: int32
    ReportRequestDTO:
      required:
        - content
        - linkId
        - linkType
        - topic
      type: object
      properties:
        linkType:
          type: string
          enum:
            - RESERVATION
            - TICKET
        linkId:
          type: integer
          format: int64
        topic:
          maxLength: 100
          minLength: 0
          type: string
        content:
          type: string
    BaseResponseReport:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer
          format: int32
        time:
          type: integer
          format: int64
        successful:
          type: boolean
        data:
          $ref: '#/components/schemas/Report'
    Report:
      type: object
      properties:
        reportId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        linkType:
          type: string
          enum:
            - RESERVATION
            - TICKET
        linkId:
          type: integer
          format: int64
        topic:
          type: string
        content:
          type: string
        reportStatus:
          type: string
          enum:
            - PENDING
            - REVIEWED
    PaymentRequestDTO:
      required:
        - paymentMeans
        - reservationId
      type: object
      properties:
        reservationId:
          type: integer
          format: int64
        paymentMeans:
          type: string
          enum:
            - CARD
            - WALLET
            - CRYPTO
    BaseResponsePaymentRecordDTO:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer
          format: int32
        time:
          type: integer
          format: int64
        successful:
          type: boolean
        data:
          $ref: '#/components/schemas/PaymentRecordDTO'
    PaymentRecordDTO:
      type: object
      properties:
        paymentId:
          type: integer
          format: int64
        reservationId:
          type: integer
          format: int64
        paymentStatus:
          type: string
        paymentType:
          type: string
        paymentTimestamp:
          type: string
          format: date-time
        price:
          type: number
    BaseResponseReserveConfirmationDTO:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer
          format: int32
        time:
          type: integer
          format: int64
        successful:
          type: boolean
        data:
          $ref: '#/components/schemas/ReserveConfirmationDTO'
    ReserveConfirmationDTO:
      type: object
      properties:
        reservationId:
          type: integer
          format: int64
        reservationDatetime:
          type: string
          format: date-time
        expirationDatetime:
          type: string
          format: date-time
        isRoundTrip:
          type: boolean
        seatNumber:
          type: integer
          format: int32
        price:
          type: number
    CancellationPenaltyRequestDTO:
      required:
        - reservationId
      type: object
      properties:
        reservationId:
          type: integer
          format: int64
    BaseResponseCancellationResponseDTO:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer
          format: int32
        time:
          type: integer
          format: int64
        successful:
          type: boolean
        data:
          $ref: '#/components/schemas/CancellationResponseDTO'
    CancellationResponseDTO:
      type: object
      properties:
        message:
          type: string
        refundedAmount:
          type: number
        newWalletBalance:
          type: number
    BaseResponseCancellationPenaltyResponseDTO:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer
          format: int32
        time:
          type: integer
          format: int64
        successful:
          type: boolean
        data:
          $ref: '#/components/schemas/CancellationPenaltyResponseDTO'
    CancellationPenaltyResponseDTO:
      type: object
      properties:
        originalPrice:
          type: number
        penaltyAmount:
          type: number
        refundAmount:
          type: number
        message:
          type: string
    SignUpRequestDTO:
      required:
        - city
        - firstName
        - lastName
        - password
      type: object
      properties:
        firstName:
          pattern: ^[A-Za-z ''-]{1,100}$
          type: string
        lastName:
          pattern: ^[A-Za-z ''-]{1,100}$
          type: string
        city:
          maxLength: 100
          minLength: 0
          type: string
        password:
          maxLength: 2147483647
          minLength: 8
          type: string
        email:
          type: string
        phoneNumber:
          pattern: ^\+?[1-9][0-9\s().-]{7,20}$
          type: string
    OtpVerificationRequestDTO:
      required:
        - contactInfo
        - otp
      type: object
      properties:
        contactInfo:
          type: string
        otp:
          maxLength: 6
          minLength: 4
          type: string
    BaseResponseLoginResponseDTO:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer
          format: int32
        time:
          type: integer
          format: int64
        successful:
          type: boolean
        data:
          $ref: '#/components/schemas/LoginResponseDTO'
    LoginResponseDTO:
      type: object
      properties:
        accessToken:
          type: string
        tokenType:
          type: string
        user:
          $ref: '#/components/schemas/UserInfoDTO'
    OtpRequestDTO:
      required:
        - contactInfo
      type: object
      properties:
        contactInfo:
          type: string
    BaseResponseListReserveRecordItemDTO:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer
          format: int32
        time:
          type: integer
          format: int64
        successful:
          type: boolean
        data:
          type: array
          items:
            $ref: '#/components/schemas/ReserveRecordItemDTO'
    ReserveRecordItemDTO:
      type: object
      properties:
        status:
          type: string
          enum:
            - UPCOMING_TRIP
            - PAST_TRIP
            - CANCELLED
            - PENDING_PAYMENT
        reservationId:
          type: integer
          format: int64
        paymentId:
          type: integer
          format: int64
        paymentTimestamp:
          type: string
          format: date-time
        seatNumber:
          type: integer
          format: int32
        isRoundTrip:
          type: boolean
        ticketInformation:
          $ref: '#/components/schemas/TicketResultItemDTO'
    TicketResultItemDTO:
      type: object
      properties:
        tripId:
          type: integer
          format: int64
        age:
          type: string
          enum:
            - ADULT
            - CHILD
            - BABY
        originCity:
          type: string
        destinationCity:
          type: string
        departureTimestamp:
          type: string
          format: date-time
        arrivalTimestamp:
          type: string
          format: date-time
        tripVehicle:
          type: string
          enum:
            - TRAIN
            - BUS
            - FLIGHT
        price:
          type: number
        vehicleCompany:
          type: string
    BaseResponseListReportResponseDTO:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer
          format: int32
        time:
          type: integer
          format: int64
        successful:
          type: boolean
        data:
          type: array
          items:
            $ref: '#/components/schemas/ReportResponseDTO'
    ReportResponseDTO:
      type: object
      properties:
        reportId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        linkType:
          type: string
          enum:
            - RESERVATION
            - TICKET
        linkId:
          type: integer
          format: int64
        topic:
          type: string
        content:
          type: string
        reportStatus:
          type: string
          enum:
            - PENDING
            - REVIEWED
    BaseResponseReportResponseDTO:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer
          format: int32
        time:
          type: integer
          format: int64
        successful:
          type: boolean
        data:
          $ref: '#/components/schemas/ReportResponseDTO'
  securitySchemes:
    bearerAuth:
      type: http
      name: bearerAuth
      scheme: bearer
      bearerFormat: JWT
