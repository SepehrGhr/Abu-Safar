services:
  db:
    image: postgres:16-alpine
    container_name: abusafar-db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    command: postgres -c wal_level=logical
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - abusafar-net

  redis:
    image: redis:7-alpine
    container_name: abusafar-redis
    command: redis-server --notify-keyspace-events Ex
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - abusafar-net

  elasticsearch:
    image: elasticsearch:8.14.1
    container_name: abusafar-elasticsearch
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200/_cluster/health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - abusafar-net

  kibana:
    image: kibana:8.14.1
    container_name: abusafar-kibana
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - abusafar-net

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: abusafar-kafka
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'

      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:9093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:29092 --list"]
      interval: 15s
      timeout: 10s
      retries: 10
    networks:
      - abusafar-net

  kafka-connect:
    image: debezium/connect:2.5
    container_name: abusafar-kafka-connect
    ports:
      - "8083:8083"
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      BOOTSTRAP_SERVERS: 'kafka:29092'
      GROUP_ID: 'compose-connect-group'
      CONFIG_STORAGE_TOPIC: 'connect-configs'
      OFFSET_STORAGE_TOPIC: 'connect-offsets'
      STATUS_STORAGE_TOPIC: 'connect-status'
    networks:
      - abusafar-net

  akhq:
    image: tchiotludo/akhq:latest
    container_name: abusafar-akhq
    ports:
      - "8081:8080"
    depends_on:
      - kafka-connect
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-cluster:
              properties:
                bootstrap.servers: "kafka:29092"
              connect:
                - name: "connect"
                  url: "http://kafka-connect:8083"
    networks:
      - abusafar-net

  connect-setup:
    image: confluentinc/cp-kafka-connect:7.6.1
    container_name: abusafar-connect-setup
    depends_on:
      kafka-connect:
        condition: service_started
    networks:
      - abusafar-net
    volumes:
      - ./kafka-connect:/config
    command: sh -c "sleep 20 && /config/configure-connector.sh"
    env_file:
      - .env

  backend:
    container_name: abusafar-backend
    build:
      context: ./backend
    ports:
      - "8888:8888"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      kafka-connect:
        condition: service_started
    networks:
      - abusafar-net

  frontend:
    build:
      context: ./frontend
    container_name: abusafar-frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - abusafar-net

  db-seeder:
    container_name: abusafar-db-seeder
    build:
      context: ./seed_data
    profiles:
      - seed
    env_file:
      - .env
    environment:
      - DB_HOST=db
    depends_on:
      db:
        condition: service_healthy
    networks:
      - abusafar-net

volumes:
  postgres_data:
  elasticsearch_data:
  kafka_data:

networks:
  abusafar-net: